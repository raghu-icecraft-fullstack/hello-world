import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { AppConfig } from '../app.config';
import { RequestHandlerService } from '../request-handler.service';
import { Subject } from 'rxjs';
import { AlertModalComponent } from '../alert-modal/alert-modal.component';
import { NgbModal } from '@ng-bootstrap/ng-bootstrap';

@Injectable()
export class waitingBinService {
    reload: Subject<void> = new Subject<void>();
    wbReloader: boolean = false;
    serviceFailurePopup: boolean = false;

    constructor(
        private appConfig: AppConfig,
        private requestHandlerService: RequestHandlerService,
        private ngbmodalService: NgbModal
    ) {}

    private getStoreNumber(): string {
        // Logic to retrieve the selected store number dynamically
        // Replace this with actual implementation as needed
        return this.appConfig.getConfig('storeData').number || 'default';
    }

    public loadWb(wbRequestData: any): Observable<any> {
        let storeNumber = this.getStoreNumber();
        let url = `${this.appConfig.getConfig('host')}/d4/store${storeNumber}/storeutil/info/rx-slot-info`;

        let params = {
            'rx': wbRequestData.rxNo,
            'fill': wbRequestData.fillNo
        };

        return new Observable((observable) => {
            let reqArg = { params: params };
            this.requestHandlerService.invoke(url, reqArg).subscribe(results => {
                if (results.completionCode == "200" && results.slotRxFillInfo) {
                    observable.next(results.slotRxFillInfo);
                }
            }, err => {
                this.showServiceFailureAlert();
                observable.error("service failed");
            });
        });
    }

    public slotInfo(): Observable<any> {
        let storeNumber = this.getStoreNumber();
        let url = `${this.appConfig.getConfig('host')}/d4/store${storeNumber}/storeutil/info/slot-capacity-info`;
        return new Observable((observable) => {
            this.requestHandlerService.invoke(url, {}).subscribe(results => {
                if (results.completionCode == "200" && results.slotcapacities) {
                    observable.next(results.slotcapacities);
                }
            }, err => {
                this.showServiceFailureAlert();
                observable.error("service failed");
            });
        });
    }

    public getSlotNbrData(slotRequestData: any): Observable<any> {
        let storeNumber = this.getStoreNumber();
        let url = `${this.appConfig.getConfig('host')}/d4/store${storeNumber}/storeutil/info/slot-rx-info`;

        let params = { 'slot': slotRequestData };

        return new Observable((observable) => {
            let reqArg = { params: params };
            this.requestHandlerService.invoke(url, reqArg).subscribe(results => {
                if (results.completionCode == "200" && results.slotRxFillInfo) {
                    observable.next(results.slotRxFillInfo);
                }
            }, err => {
                this.showServiceFailureAlert();
                observable.error("service failed");
            });
        });
    }

    public wb(): Observable<any> {
        let storeNumber = this.getStoreNumber();
        let url = `${this.appConfig.getConfig('host')}/d4/store${storeNumber}/storeutil/management/health`;
        return new Observable((observable) => {
            this.requestHandlerService.invoke(url, {}).subscribe(results => {
                observable.next(results);
            }, err => {
                this.showServiceFailureAlert();
                observable.error("service failed");
            });
        });
    }

    public storeUtil(): Observable<any> {
        let storeNumber = this.getStoreNumber();
        let url = `${this.appConfig.getConfig('host')}/d4/store${storeNumber}/storeutil/management/health`;
        return new Observable((observable) => {
            this.requestHandlerService.invoke(url, {}).subscribe(results => {
                observable.next(results);
            }, err => {
                this.showServiceFailureAlert();
                observable.error("service failed");
            });
        });
    }

    reLoader(): void {
        this.wbReloader = true;
        this.reload.next();
    }

    private showServiceFailureAlert() {
        if (!this.serviceFailurePopup) {
            this.serviceFailurePopup = true;
            AlertModalComponent.title = "Service Failure";
            AlertModalComponent.body = "Unable to process at this time. Please try again later.";
            AlertModalComponent.buttonList = ["OK"];
            let config = {
                backdrop: true,
                ignoreBackdropClick: true,
                windowClass: "alert-modal"
            };
            this.ngbmodalService.open(AlertModalComponent, config).result.then(() => {
                this.serviceFailurePopup = false;
            });
        }
    }
}
